
==================== FINAL INTERFACE ====================
2019-10-23 16:39:02.019288 UTC

interface main@main:Ex02 7103
  interface hash: 81d3ad7e59c14a6c7972f67fa7ddee66
  ABI hash: 49d42026b306472f49acde2a2837d6e1
  export-list hash: ca5eb70e99277f3af33004e2dd9c8033
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 09723ccb1cfc928708700f596301395b
  sig of: Nothing
  used TH splices: False
  where
exports:
  Ex02.define
  Ex02.eval
  Ex02.find
  Ex02.j42
  Ex02.law1
  Ex02.law2
  Ex02.law3
  Ex02.law4
  Ex02.v42
  Ex02.Dict
  Ex02.EDict
  Ex02.Expr{Ex02.Add Ex02.Def Ex02.Dvd Ex02.Mul Ex02.Sub Ex02.Val Ex02.Var}
  Ex02.Id
module dependencies:
package dependencies: base-4.8.2.0* ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:GHC.Generics
import  -/  base-4.8.2.0:Data.List 3f0782c8d4bf50eecefcd5ea1798aac8
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Real 1281efa9baf803bc7859d7efb89a38b3
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
22a3b5fd6ea41cbd59807b0ca4239b6b
  $fEqExpr :: GHC.Classes.Eq Ex02.Expr
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Ex02.Expr Ex02.$fEqExpr_$c== Ex02.$fEqExpr_$c/= -}
22a3b5fd6ea41cbd59807b0ca4239b6b
  $fEqExpr_$c/= :: Ex02.Expr -> Ex02.Expr -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a :: Ex02.Expr b :: Ex02.Expr ->
                 case Ex02.$fEqExpr_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
22a3b5fd6ea41cbd59807b0ca4239b6b
  $fEqExpr_$c== :: Ex02.Expr -> Ex02.Expr -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
22a3b5fd6ea41cbd59807b0ca4239b6b
  $fShowExpr :: GHC.Show.Show Ex02.Expr
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Ex02.Expr
                  Ex02.$fShowExpr_$cshowsPrec
                  Ex02.$fShowExpr_$cshow
                  Ex02.$fShowExpr_$cshowList -}
22a3b5fd6ea41cbd59807b0ca4239b6b
  $fShowExpr1 :: Ex02.Expr -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: Ex02.Expr -> Ex02.$w$cshowsPrec 0 w) -}
22a3b5fd6ea41cbd59807b0ca4239b6b
  $fShowExpr_$cshow :: Ex02.Expr -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Ex02.Expr ->
                 Ex02.$fShowExpr_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
22a3b5fd6ea41cbd59807b0ca4239b6b
  $fShowExpr_$cshowList :: [Ex02.Expr] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Ex02.Expr Ex02.$fShowExpr1) -}
22a3b5fd6ea41cbd59807b0ca4239b6b
  $fShowExpr_$cshowsPrec ::
    GHC.Types.Int -> Ex02.Expr -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: Ex02.Expr ->
                 case w of ww { GHC.Types.I# ww1 -> Ex02.$w$cshowsPrec ww1 w1 }) -}
22a3b5fd6ea41cbd59807b0ca4239b6b
  $w$cshowsPrec :: GHC.Prim.Int# -> Ex02.Expr -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
d08725670ec9ffd6f99b7236565bf831
  type Dict k d = [(k, d)]
09321fc011c126268217edb711b231db
  type EDict = Ex02.Dict GHC.Base.String GHC.Types.Double
22a3b5fd6ea41cbd59807b0ca4239b6b
  data Expr
    = Val GHC.Types.Double
    | Add Ex02.Expr Ex02.Expr
    | Mul Ex02.Expr Ex02.Expr
    | Sub Ex02.Expr Ex02.Expr
    | Dvd Ex02.Expr Ex02.Expr
    | Var Ex02.Id
    | Def Ex02.Id Ex02.Expr Ex02.Expr
08c4bd684d8a5ef3ca7cf003ce6de2d6
  type Id = GHC.Base.String
e372d302eba8a94b4d270fc22a220fa4
  define :: Ex02.Dict k d -> k -> d -> Ex02.Dict k d
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><L,U>m2,
     Unfolding: InlineRule (3, True, False)
                (\ @ k @ d d1 :: Ex02.Dict k d s :: k v :: d ->
                 GHC.Types.: @ (k, d) (s, v) d1) -}
65a1c716dbe5b3f0a9582ecf6c190534
  eval :: Ex02.EDict -> Ex02.Expr -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U> -}
9ef9adc2a3191465e9aaac0a6c6fa09e
  find :: GHC.Classes.Eq k => Ex02.Dict k d -> k -> GHC.Base.Maybe d
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><L,U> -}
68c1772a51718a20a24ee4e780076c15
  find_$sfind ::
    Ex02.Dict GHC.Base.String d -> GHC.Base.String -> GHC.Base.Maybe d
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U> -}
9e5d9ae7c5165aa6d4814e89c04badc8
  j42 :: GHC.Base.Maybe Ex02.Expr
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just @ Ex02.Expr Ex02.v42) -}
3388259898dc5a240e113cff64fd1a6d
  law1 :: Ex02.Expr -> GHC.Base.Maybe Ex02.Expr
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ e :: Ex02.Expr ->
                 case e of wild {
                   DEFAULT -> GHC.Base.Nothing @ Ex02.Expr
                   Ex02.Add x y -> GHC.Base.Just @ Ex02.Expr (Ex02.Add y x) }) -}
18cc28cde0499d2fee66735a89f6d3c6
  law2 :: Ex02.Expr -> GHC.Base.Maybe Ex02.Expr
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ e :: Ex02.Expr ->
                 case e of wild {
                   DEFAULT -> GHC.Base.Nothing @ Ex02.Expr
                   Ex02.Add x ds
                   -> case ds of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ Ex02.Expr
                        Ex02.Add y z
                        -> GHC.Base.Just @ Ex02.Expr (Ex02.Add (Ex02.Add x y) z) } }) -}
a28b0a5cf46fb96ea8a33437af66546d
  law3 :: Ex02.Expr -> GHC.Base.Maybe Ex02.Expr
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ e :: Ex02.Expr ->
                 case e of wild {
                   DEFAULT -> GHC.Base.Nothing @ Ex02.Expr
                   Ex02.Sub x ds
                   -> case ds of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ Ex02.Expr
                        Ex02.Add y z
                        -> GHC.Base.Just @ Ex02.Expr (Ex02.Sub (Ex02.Sub x y) z) } }) -}
cc95e044ce3afa14a09eea9db29dea84
  law4 :: Ex02.Expr -> GHC.Base.Maybe Ex02.Expr
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ e :: Ex02.Expr ->
                 case e of wild {
                   DEFAULT -> GHC.Base.Nothing @ Ex02.Expr
                   Ex02.Mul ds ds1
                   -> case ds of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ Ex02.Expr
                        Ex02.Add x y
                        -> case ds1 of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ Ex02.Expr
                             Ex02.Sub a b
                             -> case Ex02.$fEqExpr_$c== x a of wild3 {
                                  GHC.Types.False -> GHC.Base.Nothing @ Ex02.Expr
                                  GHC.Types.True
                                  -> case Ex02.$fEqExpr_$c== y b of wild4 {
                                       GHC.Types.False -> GHC.Base.Nothing @ Ex02.Expr
                                       GHC.Types.True
                                       -> GHC.Base.Just
                                            @ Ex02.Expr
                                            (Ex02.Sub (Ex02.Mul x x) (Ex02.Mul y y)) } } } } }) -}
01f73b5f8a281f4825cc5ba45a1e240c
  v1 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 42.0) -}
6e23a62135a7711e2ce080b4c67a6d8c
  v42 :: Ex02.Expr
  {- HasNoCafRefs, Strictness: m1, Unfolding: (Ex02.Val Ex02.v1) -}
instance GHC.Classes.Eq [Ex02.Expr] = Ex02.$fEqExpr
instance GHC.Show.Show [Ex02.Expr] = Ex02.$fShowExpr
"SPEC find @ String _" [ALWAYS] forall @ d
                                       $dEq :: GHC.Classes.Eq GHC.Base.String
  Ex02.find @ [GHC.Types.Char] @ d $dEq = Ex02.find_$sfind @ d
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

